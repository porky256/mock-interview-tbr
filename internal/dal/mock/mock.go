// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/dal/base.go

// Package mock_dal is a generated GoMock package.
package mock_dal

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/porky256/mock-interview-tbr/internal/dal/models"
)

// MockUserDatabaseProvider is a mock of UserDatabaseProvider interface.
type MockUserDatabaseProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUserDatabaseProviderMockRecorder
}

// MockUserDatabaseProviderMockRecorder is the mock recorder for MockUserDatabaseProvider.
type MockUserDatabaseProviderMockRecorder struct {
	mock *MockUserDatabaseProvider
}

// NewMockUserDatabaseProvider creates a new mock instance.
func NewMockUserDatabaseProvider(ctrl *gomock.Controller) *MockUserDatabaseProvider {
	mock := &MockUserDatabaseProvider{ctrl: ctrl}
	mock.recorder = &MockUserDatabaseProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDatabaseProvider) EXPECT() *MockUserDatabaseProviderMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockUserDatabaseProvider) GetUserByID(id int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserDatabaseProviderMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserDatabaseProvider)(nil).GetUserByID), id)
}

// InsertUser mocks base method.
func (m *MockUserDatabaseProvider) InsertUser(u models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserDatabaseProviderMockRecorder) InsertUser(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserDatabaseProvider)(nil).InsertUser), u)
}

// MockMatchDatabaseProvider is a mock of MatchDatabaseProvider interface.
type MockMatchDatabaseProvider struct {
	ctrl     *gomock.Controller
	recorder *MockMatchDatabaseProviderMockRecorder
}

// MockMatchDatabaseProviderMockRecorder is the mock recorder for MockMatchDatabaseProvider.
type MockMatchDatabaseProviderMockRecorder struct {
	mock *MockMatchDatabaseProvider
}

// NewMockMatchDatabaseProvider creates a new mock instance.
func NewMockMatchDatabaseProvider(ctrl *gomock.Controller) *MockMatchDatabaseProvider {
	mock := &MockMatchDatabaseProvider{ctrl: ctrl}
	mock.recorder = &MockMatchDatabaseProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchDatabaseProvider) EXPECT() *MockMatchDatabaseProviderMockRecorder {
	return m.recorder
}

// GetUserMatchByID mocks base method.
func (m *MockMatchDatabaseProvider) GetUserMatchByID(id int) (*models.UserMatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMatchByID", id)
	ret0, _ := ret[0].(*models.UserMatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMatchByID indicates an expected call of GetUserMatchByID.
func (mr *MockMatchDatabaseProviderMockRecorder) GetUserMatchByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMatchByID", reflect.TypeOf((*MockMatchDatabaseProvider)(nil).GetUserMatchByID), id)
}

// MockSkillDatabaseProvider is a mock of SkillDatabaseProvider interface.
type MockSkillDatabaseProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSkillDatabaseProviderMockRecorder
}

// MockSkillDatabaseProviderMockRecorder is the mock recorder for MockSkillDatabaseProvider.
type MockSkillDatabaseProviderMockRecorder struct {
	mock *MockSkillDatabaseProvider
}

// NewMockSkillDatabaseProvider creates a new mock instance.
func NewMockSkillDatabaseProvider(ctrl *gomock.Controller) *MockSkillDatabaseProvider {
	mock := &MockSkillDatabaseProvider{ctrl: ctrl}
	mock.recorder = &MockSkillDatabaseProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSkillDatabaseProvider) EXPECT() *MockSkillDatabaseProviderMockRecorder {
	return m.recorder
}

// GetSkillByID mocks base method.
func (m *MockSkillDatabaseProvider) GetSkillByID(id int) (*models.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillByID", id)
	ret0, _ := ret[0].(*models.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillByID indicates an expected call of GetSkillByID.
func (mr *MockSkillDatabaseProviderMockRecorder) GetSkillByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillByID", reflect.TypeOf((*MockSkillDatabaseProvider)(nil).GetSkillByID), id)
}

// MockGlobalDatabaseProvider is a mock of GlobalDatabaseProvider interface.
type MockGlobalDatabaseProvider struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalDatabaseProviderMockRecorder
}

// MockGlobalDatabaseProviderMockRecorder is the mock recorder for MockGlobalDatabaseProvider.
type MockGlobalDatabaseProviderMockRecorder struct {
	mock *MockGlobalDatabaseProvider
}

// NewMockGlobalDatabaseProvider creates a new mock instance.
func NewMockGlobalDatabaseProvider(ctrl *gomock.Controller) *MockGlobalDatabaseProvider {
	mock := &MockGlobalDatabaseProvider{ctrl: ctrl}
	mock.recorder = &MockGlobalDatabaseProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalDatabaseProvider) EXPECT() *MockGlobalDatabaseProviderMockRecorder {
	return m.recorder
}

// GetSkillByID mocks base method.
func (m *MockGlobalDatabaseProvider) GetSkillByID(id int) (*models.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillByID", id)
	ret0, _ := ret[0].(*models.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillByID indicates an expected call of GetSkillByID.
func (mr *MockGlobalDatabaseProviderMockRecorder) GetSkillByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillByID", reflect.TypeOf((*MockGlobalDatabaseProvider)(nil).GetSkillByID), id)
}

// GetUserByID mocks base method.
func (m *MockGlobalDatabaseProvider) GetUserByID(id int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockGlobalDatabaseProviderMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockGlobalDatabaseProvider)(nil).GetUserByID), id)
}

// GetUserMatchByID mocks base method.
func (m *MockGlobalDatabaseProvider) GetUserMatchByID(id int) (*models.UserMatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMatchByID", id)
	ret0, _ := ret[0].(*models.UserMatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMatchByID indicates an expected call of GetUserMatchByID.
func (mr *MockGlobalDatabaseProviderMockRecorder) GetUserMatchByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMatchByID", reflect.TypeOf((*MockGlobalDatabaseProvider)(nil).GetUserMatchByID), id)
}

// InsertUser mocks base method.
func (m *MockGlobalDatabaseProvider) InsertUser(u models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockGlobalDatabaseProviderMockRecorder) InsertUser(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockGlobalDatabaseProvider)(nil).InsertUser), u)
}
