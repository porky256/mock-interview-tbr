// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/user/userrepo/repo_interface.go

// Package mock_userrepo is a generated GoMock package.
package mock_userrepo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repomodels "github.com/porky256/mock-interview-tbr/internal/models/repomodels"
)

// MockuserProvider is a mock of userProvider interface.
type MockuserProvider struct {
	ctrl     *gomock.Controller
	recorder *MockuserProviderMockRecorder
}

// MockuserProviderMockRecorder is the mock recorder for MockuserProvider.
type MockuserProviderMockRecorder struct {
	mock *MockuserProvider
}

// NewMockuserProvider creates a new mock instance.
func NewMockuserProvider(ctrl *gomock.Controller) *MockuserProvider {
	mock := &MockuserProvider{ctrl: ctrl}
	mock.recorder = &MockuserProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserProvider) EXPECT() *MockuserProviderMockRecorder {
	return m.recorder
}

// DeleteUserByID mocks base method.
func (m *MockuserProvider) DeleteUserByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockuserProviderMockRecorder) DeleteUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockuserProvider)(nil).DeleteUserByID), id)
}

// GetUserByID mocks base method.
func (m *MockuserProvider) GetUserByID(id int) (*repomodels.UserRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*repomodels.UserRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockuserProviderMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockuserProvider)(nil).GetUserByID), id)
}

// GetUserByUsername mocks base method.
func (m *MockuserProvider) GetUserByUsername(username string) (*repomodels.UserRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(*repomodels.UserRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockuserProviderMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockuserProvider)(nil).GetUserByUsername), username)
}

// InsertUser mocks base method.
func (m *MockuserProvider) InsertUser(user repomodels.UserRepo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockuserProviderMockRecorder) InsertUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockuserProvider)(nil).InsertUser), user)
}

// UpdateUser mocks base method.
func (m *MockuserProvider) UpdateUser(user repomodels.UserRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockuserProviderMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockuserProvider)(nil).UpdateUser), user)
}

// MockuserSkillProvider is a mock of userSkillProvider interface.
type MockuserSkillProvider struct {
	ctrl     *gomock.Controller
	recorder *MockuserSkillProviderMockRecorder
}

// MockuserSkillProviderMockRecorder is the mock recorder for MockuserSkillProvider.
type MockuserSkillProviderMockRecorder struct {
	mock *MockuserSkillProvider
}

// NewMockuserSkillProvider creates a new mock instance.
func NewMockuserSkillProvider(ctrl *gomock.Controller) *MockuserSkillProvider {
	mock := &MockuserSkillProvider{ctrl: ctrl}
	mock.recorder = &MockuserSkillProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserSkillProvider) EXPECT() *MockuserSkillProviderMockRecorder {
	return m.recorder
}

// DeleteUserSkillByID mocks base method.
func (m *MockuserSkillProvider) DeleteUserSkillByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSkillByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSkillByID indicates an expected call of DeleteUserSkillByID.
func (mr *MockuserSkillProviderMockRecorder) DeleteUserSkillByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSkillByID", reflect.TypeOf((*MockuserSkillProvider)(nil).DeleteUserSkillByID), id)
}

// DeleteUserSkillByUserID mocks base method.
func (m *MockuserSkillProvider) DeleteUserSkillByUserID(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSkillByUserID", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSkillByUserID indicates an expected call of DeleteUserSkillByUserID.
func (mr *MockuserSkillProviderMockRecorder) DeleteUserSkillByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSkillByUserID", reflect.TypeOf((*MockuserSkillProvider)(nil).DeleteUserSkillByUserID), userID)
}

// GetUserSkillByID mocks base method.
func (m *MockuserSkillProvider) GetUserSkillByID(id int) (*repomodels.UserSkillRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSkillByID", id)
	ret0, _ := ret[0].(*repomodels.UserSkillRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSkillByID indicates an expected call of GetUserSkillByID.
func (mr *MockuserSkillProviderMockRecorder) GetUserSkillByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSkillByID", reflect.TypeOf((*MockuserSkillProvider)(nil).GetUserSkillByID), id)
}

// GetUsersSkillsByUserID mocks base method.
func (m *MockuserSkillProvider) GetUsersSkillsByUserID(userID int) ([]repomodels.UserSkillRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersSkillsByUserID", userID)
	ret0, _ := ret[0].([]repomodels.UserSkillRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersSkillsByUserID indicates an expected call of GetUsersSkillsByUserID.
func (mr *MockuserSkillProviderMockRecorder) GetUsersSkillsByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersSkillsByUserID", reflect.TypeOf((*MockuserSkillProvider)(nil).GetUsersSkillsByUserID), userID)
}

// InsertUserSkill mocks base method.
func (m *MockuserSkillProvider) InsertUserSkill(skill repomodels.UserSkillRepo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserSkill", skill)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUserSkill indicates an expected call of InsertUserSkill.
func (mr *MockuserSkillProviderMockRecorder) InsertUserSkill(skill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserSkill", reflect.TypeOf((*MockuserSkillProvider)(nil).InsertUserSkill), skill)
}

// UpdateUserSkill mocks base method.
func (m *MockuserSkillProvider) UpdateUserSkill(skill repomodels.UserSkillRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSkill", skill)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserSkill indicates an expected call of UpdateUserSkill.
func (mr *MockuserSkillProviderMockRecorder) UpdateUserSkill(skill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSkill", reflect.TypeOf((*MockuserSkillProvider)(nil).UpdateUserSkill), skill)
}

// MockDatabaseUserProvider is a mock of DatabaseUserProvider interface.
type MockDatabaseUserProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseUserProviderMockRecorder
}

// MockDatabaseUserProviderMockRecorder is the mock recorder for MockDatabaseUserProvider.
type MockDatabaseUserProviderMockRecorder struct {
	mock *MockDatabaseUserProvider
}

// NewMockDatabaseUserProvider creates a new mock instance.
func NewMockDatabaseUserProvider(ctrl *gomock.Controller) *MockDatabaseUserProvider {
	mock := &MockDatabaseUserProvider{ctrl: ctrl}
	mock.recorder = &MockDatabaseUserProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseUserProvider) EXPECT() *MockDatabaseUserProviderMockRecorder {
	return m.recorder
}

// DeleteUserByID mocks base method.
func (m *MockDatabaseUserProvider) DeleteUserByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockDatabaseUserProviderMockRecorder) DeleteUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockDatabaseUserProvider)(nil).DeleteUserByID), id)
}

// DeleteUserSkillByID mocks base method.
func (m *MockDatabaseUserProvider) DeleteUserSkillByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSkillByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSkillByID indicates an expected call of DeleteUserSkillByID.
func (mr *MockDatabaseUserProviderMockRecorder) DeleteUserSkillByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSkillByID", reflect.TypeOf((*MockDatabaseUserProvider)(nil).DeleteUserSkillByID), id)
}

// DeleteUserSkillByUserID mocks base method.
func (m *MockDatabaseUserProvider) DeleteUserSkillByUserID(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSkillByUserID", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSkillByUserID indicates an expected call of DeleteUserSkillByUserID.
func (mr *MockDatabaseUserProviderMockRecorder) DeleteUserSkillByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSkillByUserID", reflect.TypeOf((*MockDatabaseUserProvider)(nil).DeleteUserSkillByUserID), userID)
}

// GetUserByID mocks base method.
func (m *MockDatabaseUserProvider) GetUserByID(id int) (*repomodels.UserRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*repomodels.UserRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockDatabaseUserProviderMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockDatabaseUserProvider)(nil).GetUserByID), id)
}

// GetUserByUsername mocks base method.
func (m *MockDatabaseUserProvider) GetUserByUsername(username string) (*repomodels.UserRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(*repomodels.UserRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockDatabaseUserProviderMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockDatabaseUserProvider)(nil).GetUserByUsername), username)
}

// GetUserSkillByID mocks base method.
func (m *MockDatabaseUserProvider) GetUserSkillByID(id int) (*repomodels.UserSkillRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSkillByID", id)
	ret0, _ := ret[0].(*repomodels.UserSkillRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSkillByID indicates an expected call of GetUserSkillByID.
func (mr *MockDatabaseUserProviderMockRecorder) GetUserSkillByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSkillByID", reflect.TypeOf((*MockDatabaseUserProvider)(nil).GetUserSkillByID), id)
}

// GetUsersSkillsByUserID mocks base method.
func (m *MockDatabaseUserProvider) GetUsersSkillsByUserID(userID int) ([]repomodels.UserSkillRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersSkillsByUserID", userID)
	ret0, _ := ret[0].([]repomodels.UserSkillRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersSkillsByUserID indicates an expected call of GetUsersSkillsByUserID.
func (mr *MockDatabaseUserProviderMockRecorder) GetUsersSkillsByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersSkillsByUserID", reflect.TypeOf((*MockDatabaseUserProvider)(nil).GetUsersSkillsByUserID), userID)
}

// InsertUser mocks base method.
func (m *MockDatabaseUserProvider) InsertUser(user repomodels.UserRepo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockDatabaseUserProviderMockRecorder) InsertUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockDatabaseUserProvider)(nil).InsertUser), user)
}

// InsertUserSkill mocks base method.
func (m *MockDatabaseUserProvider) InsertUserSkill(skill repomodels.UserSkillRepo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserSkill", skill)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUserSkill indicates an expected call of InsertUserSkill.
func (mr *MockDatabaseUserProviderMockRecorder) InsertUserSkill(skill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserSkill", reflect.TypeOf((*MockDatabaseUserProvider)(nil).InsertUserSkill), skill)
}

// UpdateUser mocks base method.
func (m *MockDatabaseUserProvider) UpdateUser(user repomodels.UserRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDatabaseUserProviderMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDatabaseUserProvider)(nil).UpdateUser), user)
}

// UpdateUserSkill mocks base method.
func (m *MockDatabaseUserProvider) UpdateUserSkill(skill repomodels.UserSkillRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSkill", skill)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserSkill indicates an expected call of UpdateUserSkill.
func (mr *MockDatabaseUserProviderMockRecorder) UpdateUserSkill(skill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSkill", reflect.TypeOf((*MockDatabaseUserProvider)(nil).UpdateUserSkill), skill)
}
