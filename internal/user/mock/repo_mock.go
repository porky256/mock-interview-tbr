// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/user/repo_interface.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repomodel "github.com/porky256/mock-interview-tbr/internal/models/repo"
)

// MockDatabaseUserProvider is a mock of DatabaseUserProvider interface.
type MockDatabaseUserProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseUserProviderMockRecorder
}

// MockDatabaseUserProviderMockRecorder is the mock recorder for MockDatabaseUserProvider.
type MockDatabaseUserProviderMockRecorder struct {
	mock *MockDatabaseUserProvider
}

// NewMockDatabaseUserProvider creates a new mock instance.
func NewMockDatabaseUserProvider(ctrl *gomock.Controller) *MockDatabaseUserProvider {
	mock := &MockDatabaseUserProvider{ctrl: ctrl}
	mock.recorder = &MockDatabaseUserProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseUserProvider) EXPECT() *MockDatabaseUserProviderMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockDatabaseUserProvider) GetUserByID(id int) (*repomodel.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*repomodel.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockDatabaseUserProviderMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockDatabaseUserProvider)(nil).GetUserByID), id)
}

// InsertUser mocks base method.
func (m *MockDatabaseUserProvider) InsertUser(u repomodel.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockDatabaseUserProviderMockRecorder) InsertUser(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockDatabaseUserProvider)(nil).InsertUser), u)
}
