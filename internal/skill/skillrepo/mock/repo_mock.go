// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/skill/skillrepo/repo_interface.go

// Package mock_skillrepo is a generated GoMock package.
package mock_skillrepo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repomodels "github.com/porky256/mock-interview-tbr/internal/models/repomodels"
)

// MockskillProvider is a mock of skillProvider interface.
type MockskillProvider struct {
	ctrl     *gomock.Controller
	recorder *MockskillProviderMockRecorder
}

// MockskillProviderMockRecorder is the mock recorder for MockskillProvider.
type MockskillProviderMockRecorder struct {
	mock *MockskillProvider
}

// NewMockskillProvider creates a new mock instance.
func NewMockskillProvider(ctrl *gomock.Controller) *MockskillProvider {
	mock := &MockskillProvider{ctrl: ctrl}
	mock.recorder = &MockskillProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockskillProvider) EXPECT() *MockskillProviderMockRecorder {
	return m.recorder
}

// DeleteSkillByID mocks base method.
func (m *MockskillProvider) DeleteSkillByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSkillByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSkillByID indicates an expected call of DeleteSkillByID.
func (mr *MockskillProviderMockRecorder) DeleteSkillByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSkillByID", reflect.TypeOf((*MockskillProvider)(nil).DeleteSkillByID), id)
}

// GetSkillByID mocks base method.
func (m *MockskillProvider) GetSkillByID(id int) (*repomodels.SkillRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillByID", id)
	ret0, _ := ret[0].(*repomodels.SkillRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillByID indicates an expected call of GetSkillByID.
func (mr *MockskillProviderMockRecorder) GetSkillByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillByID", reflect.TypeOf((*MockskillProvider)(nil).GetSkillByID), id)
}

// GetSkillByName mocks base method.
func (m *MockskillProvider) GetSkillByName(name string) (*repomodels.SkillRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillByName", name)
	ret0, _ := ret[0].(*repomodels.SkillRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillByName indicates an expected call of GetSkillByName.
func (mr *MockskillProviderMockRecorder) GetSkillByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillByName", reflect.TypeOf((*MockskillProvider)(nil).GetSkillByName), name)
}

// InsertSkill mocks base method.
func (m *MockskillProvider) InsertSkill(skill repomodels.SkillRepo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSkill", skill)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertSkill indicates an expected call of InsertSkill.
func (mr *MockskillProviderMockRecorder) InsertSkill(skill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSkill", reflect.TypeOf((*MockskillProvider)(nil).InsertSkill), skill)
}

// UpdateSkill mocks base method.
func (m *MockskillProvider) UpdateSkill(skill repomodels.SkillRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSkill", skill)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSkill indicates an expected call of UpdateSkill.
func (mr *MockskillProviderMockRecorder) UpdateSkill(skill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSkill", reflect.TypeOf((*MockskillProvider)(nil).UpdateSkill), skill)
}

// MockDatabaseSkillProvider is a mock of DatabaseSkillProvider interface.
type MockDatabaseSkillProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseSkillProviderMockRecorder
}

// MockDatabaseSkillProviderMockRecorder is the mock recorder for MockDatabaseSkillProvider.
type MockDatabaseSkillProviderMockRecorder struct {
	mock *MockDatabaseSkillProvider
}

// NewMockDatabaseSkillProvider creates a new mock instance.
func NewMockDatabaseSkillProvider(ctrl *gomock.Controller) *MockDatabaseSkillProvider {
	mock := &MockDatabaseSkillProvider{ctrl: ctrl}
	mock.recorder = &MockDatabaseSkillProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseSkillProvider) EXPECT() *MockDatabaseSkillProviderMockRecorder {
	return m.recorder
}

// DeleteSkillByID mocks base method.
func (m *MockDatabaseSkillProvider) DeleteSkillByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSkillByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSkillByID indicates an expected call of DeleteSkillByID.
func (mr *MockDatabaseSkillProviderMockRecorder) DeleteSkillByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSkillByID", reflect.TypeOf((*MockDatabaseSkillProvider)(nil).DeleteSkillByID), id)
}

// GetSkillByID mocks base method.
func (m *MockDatabaseSkillProvider) GetSkillByID(id int) (*repomodels.SkillRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillByID", id)
	ret0, _ := ret[0].(*repomodels.SkillRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillByID indicates an expected call of GetSkillByID.
func (mr *MockDatabaseSkillProviderMockRecorder) GetSkillByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillByID", reflect.TypeOf((*MockDatabaseSkillProvider)(nil).GetSkillByID), id)
}

// GetSkillByName mocks base method.
func (m *MockDatabaseSkillProvider) GetSkillByName(name string) (*repomodels.SkillRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillByName", name)
	ret0, _ := ret[0].(*repomodels.SkillRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillByName indicates an expected call of GetSkillByName.
func (mr *MockDatabaseSkillProviderMockRecorder) GetSkillByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillByName", reflect.TypeOf((*MockDatabaseSkillProvider)(nil).GetSkillByName), name)
}

// InsertSkill mocks base method.
func (m *MockDatabaseSkillProvider) InsertSkill(skill repomodels.SkillRepo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSkill", skill)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertSkill indicates an expected call of InsertSkill.
func (mr *MockDatabaseSkillProviderMockRecorder) InsertSkill(skill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSkill", reflect.TypeOf((*MockDatabaseSkillProvider)(nil).InsertSkill), skill)
}

// UpdateSkill mocks base method.
func (m *MockDatabaseSkillProvider) UpdateSkill(skill repomodels.SkillRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSkill", skill)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSkill indicates an expected call of UpdateSkill.
func (mr *MockDatabaseSkillProviderMockRecorder) UpdateSkill(skill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSkill", reflect.TypeOf((*MockDatabaseSkillProvider)(nil).UpdateSkill), skill)
}
