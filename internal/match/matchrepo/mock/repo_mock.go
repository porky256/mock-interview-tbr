// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/match/matchrepo/repo_interface.go

// Package mock_matchrepo is a generated GoMock package.
package mock_matchrepo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repomodels "github.com/porky256/mock-interview-tbr/internal/models/repomodels"
)

// MockuserMatchProvider is a mock of userMatchProvider interface.
type MockuserMatchProvider struct {
	ctrl     *gomock.Controller
	recorder *MockuserMatchProviderMockRecorder
}

// MockuserMatchProviderMockRecorder is the mock recorder for MockuserMatchProvider.
type MockuserMatchProviderMockRecorder struct {
	mock *MockuserMatchProvider
}

// NewMockuserMatchProvider creates a new mock instance.
func NewMockuserMatchProvider(ctrl *gomock.Controller) *MockuserMatchProvider {
	mock := &MockuserMatchProvider{ctrl: ctrl}
	mock.recorder = &MockuserMatchProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserMatchProvider) EXPECT() *MockuserMatchProviderMockRecorder {
	return m.recorder
}

// DeleteUserMatchByID mocks base method.
func (m *MockuserMatchProvider) DeleteUserMatchByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserMatchByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserMatchByID indicates an expected call of DeleteUserMatchByID.
func (mr *MockuserMatchProviderMockRecorder) DeleteUserMatchByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserMatchByID", reflect.TypeOf((*MockuserMatchProvider)(nil).DeleteUserMatchByID), id)
}

// GetUserMatchByID mocks base method.
func (m *MockuserMatchProvider) GetUserMatchByID(id int) (*repomodels.UserMatchRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMatchByID", id)
	ret0, _ := ret[0].(*repomodels.UserMatchRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMatchByID indicates an expected call of GetUserMatchByID.
func (mr *MockuserMatchProviderMockRecorder) GetUserMatchByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMatchByID", reflect.TypeOf((*MockuserMatchProvider)(nil).GetUserMatchByID), id)
}

// GetUserMatchByUserAskerID mocks base method.
func (m *MockuserMatchProvider) GetUserMatchByUserAskerID(userID int) (*repomodels.UserMatchRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMatchByUserAskerID", userID)
	ret0, _ := ret[0].(*repomodels.UserMatchRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMatchByUserAskerID indicates an expected call of GetUserMatchByUserAskerID.
func (mr *MockuserMatchProviderMockRecorder) GetUserMatchByUserAskerID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMatchByUserAskerID", reflect.TypeOf((*MockuserMatchProvider)(nil).GetUserMatchByUserAskerID), userID)
}

// InsertUserMatch mocks base method.
func (m *MockuserMatchProvider) InsertUserMatch(match repomodels.UserMatchRepo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserMatch", match)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUserMatch indicates an expected call of InsertUserMatch.
func (mr *MockuserMatchProviderMockRecorder) InsertUserMatch(match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserMatch", reflect.TypeOf((*MockuserMatchProvider)(nil).InsertUserMatch), match)
}

// UpdateUserMatch mocks base method.
func (m *MockuserMatchProvider) UpdateUserMatch(match repomodels.UserMatchRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserMatch", match)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserMatch indicates an expected call of UpdateUserMatch.
func (mr *MockuserMatchProviderMockRecorder) UpdateUserMatch(match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserMatch", reflect.TypeOf((*MockuserMatchProvider)(nil).UpdateUserMatch), match)
}

// MockmatchRequestProvider is a mock of matchRequestProvider interface.
type MockmatchRequestProvider struct {
	ctrl     *gomock.Controller
	recorder *MockmatchRequestProviderMockRecorder
}

// MockmatchRequestProviderMockRecorder is the mock recorder for MockmatchRequestProvider.
type MockmatchRequestProviderMockRecorder struct {
	mock *MockmatchRequestProvider
}

// NewMockmatchRequestProvider creates a new mock instance.
func NewMockmatchRequestProvider(ctrl *gomock.Controller) *MockmatchRequestProvider {
	mock := &MockmatchRequestProvider{ctrl: ctrl}
	mock.recorder = &MockmatchRequestProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmatchRequestProvider) EXPECT() *MockmatchRequestProviderMockRecorder {
	return m.recorder
}

// DeleteMatchRequestByID mocks base method.
func (m *MockmatchRequestProvider) DeleteMatchRequestByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMatchRequestByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMatchRequestByID indicates an expected call of DeleteMatchRequestByID.
func (mr *MockmatchRequestProviderMockRecorder) DeleteMatchRequestByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMatchRequestByID", reflect.TypeOf((*MockmatchRequestProvider)(nil).DeleteMatchRequestByID), id)
}

// GetMatchRequestByID mocks base method.
func (m *MockmatchRequestProvider) GetMatchRequestByID(id int) (*repomodels.MatchRequestRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchRequestByID", id)
	ret0, _ := ret[0].(*repomodels.MatchRequestRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchRequestByID indicates an expected call of GetMatchRequestByID.
func (mr *MockmatchRequestProviderMockRecorder) GetMatchRequestByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchRequestByID", reflect.TypeOf((*MockmatchRequestProvider)(nil).GetMatchRequestByID), id)
}

// GetMatchRequestByUserID mocks base method.
func (m *MockmatchRequestProvider) GetMatchRequestByUserID(userID int) (*repomodels.MatchRequestRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchRequestByUserID", userID)
	ret0, _ := ret[0].(*repomodels.MatchRequestRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchRequestByUserID indicates an expected call of GetMatchRequestByUserID.
func (mr *MockmatchRequestProviderMockRecorder) GetMatchRequestByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchRequestByUserID", reflect.TypeOf((*MockmatchRequestProvider)(nil).GetMatchRequestByUserID), userID)
}

// InsertMatchRequest mocks base method.
func (m *MockmatchRequestProvider) InsertMatchRequest(req repomodels.MatchRequestRepo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMatchRequest", req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMatchRequest indicates an expected call of InsertMatchRequest.
func (mr *MockmatchRequestProviderMockRecorder) InsertMatchRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMatchRequest", reflect.TypeOf((*MockmatchRequestProvider)(nil).InsertMatchRequest), req)
}

// UpdateMatchRequest mocks base method.
func (m *MockmatchRequestProvider) UpdateMatchRequest(req repomodels.MatchRequestRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMatchRequest", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatchRequest indicates an expected call of UpdateMatchRequest.
func (mr *MockmatchRequestProviderMockRecorder) UpdateMatchRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchRequest", reflect.TypeOf((*MockmatchRequestProvider)(nil).UpdateMatchRequest), req)
}

// MockskillInRequestProvider is a mock of skillInRequestProvider interface.
type MockskillInRequestProvider struct {
	ctrl     *gomock.Controller
	recorder *MockskillInRequestProviderMockRecorder
}

// MockskillInRequestProviderMockRecorder is the mock recorder for MockskillInRequestProvider.
type MockskillInRequestProviderMockRecorder struct {
	mock *MockskillInRequestProvider
}

// NewMockskillInRequestProvider creates a new mock instance.
func NewMockskillInRequestProvider(ctrl *gomock.Controller) *MockskillInRequestProvider {
	mock := &MockskillInRequestProvider{ctrl: ctrl}
	mock.recorder = &MockskillInRequestProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockskillInRequestProvider) EXPECT() *MockskillInRequestProviderMockRecorder {
	return m.recorder
}

// DeleteSkillInRequestByID mocks base method.
func (m *MockskillInRequestProvider) DeleteSkillInRequestByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSkillInRequestByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSkillInRequestByID indicates an expected call of DeleteSkillInRequestByID.
func (mr *MockskillInRequestProviderMockRecorder) DeleteSkillInRequestByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSkillInRequestByID", reflect.TypeOf((*MockskillInRequestProvider)(nil).DeleteSkillInRequestByID), id)
}

// DeleteSkillInRequestByRequestID mocks base method.
func (m *MockskillInRequestProvider) DeleteSkillInRequestByRequestID(requestID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSkillInRequestByRequestID", requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSkillInRequestByRequestID indicates an expected call of DeleteSkillInRequestByRequestID.
func (mr *MockskillInRequestProviderMockRecorder) DeleteSkillInRequestByRequestID(requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSkillInRequestByRequestID", reflect.TypeOf((*MockskillInRequestProvider)(nil).DeleteSkillInRequestByRequestID), requestID)
}

// GetSkillInRequestByID mocks base method.
func (m *MockskillInRequestProvider) GetSkillInRequestByID(id int) (*repomodels.SkillInRequestRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillInRequestByID", id)
	ret0, _ := ret[0].(*repomodels.SkillInRequestRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillInRequestByID indicates an expected call of GetSkillInRequestByID.
func (mr *MockskillInRequestProviderMockRecorder) GetSkillInRequestByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillInRequestByID", reflect.TypeOf((*MockskillInRequestProvider)(nil).GetSkillInRequestByID), id)
}

// GetSkillInRequestByRequestID mocks base method.
func (m *MockskillInRequestProvider) GetSkillInRequestByRequestID(requestID int) (*repomodels.SkillInRequestRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillInRequestByRequestID", requestID)
	ret0, _ := ret[0].(*repomodels.SkillInRequestRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillInRequestByRequestID indicates an expected call of GetSkillInRequestByRequestID.
func (mr *MockskillInRequestProviderMockRecorder) GetSkillInRequestByRequestID(requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillInRequestByRequestID", reflect.TypeOf((*MockskillInRequestProvider)(nil).GetSkillInRequestByRequestID), requestID)
}

// InsertSkillInRequest mocks base method.
func (m *MockskillInRequestProvider) InsertSkillInRequest(skill repomodels.SkillInRequestRepo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSkillInRequest", skill)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertSkillInRequest indicates an expected call of InsertSkillInRequest.
func (mr *MockskillInRequestProviderMockRecorder) InsertSkillInRequest(skill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSkillInRequest", reflect.TypeOf((*MockskillInRequestProvider)(nil).InsertSkillInRequest), skill)
}

// MockinterviewsProvider is a mock of interviewsProvider interface.
type MockinterviewsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockinterviewsProviderMockRecorder
}

// MockinterviewsProviderMockRecorder is the mock recorder for MockinterviewsProvider.
type MockinterviewsProviderMockRecorder struct {
	mock *MockinterviewsProvider
}

// NewMockinterviewsProvider creates a new mock instance.
func NewMockinterviewsProvider(ctrl *gomock.Controller) *MockinterviewsProvider {
	mock := &MockinterviewsProvider{ctrl: ctrl}
	mock.recorder = &MockinterviewsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockinterviewsProvider) EXPECT() *MockinterviewsProviderMockRecorder {
	return m.recorder
}

// DeleteInterviewByID mocks base method.
func (m *MockinterviewsProvider) DeleteInterviewByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInterviewByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInterviewByID indicates an expected call of DeleteInterviewByID.
func (mr *MockinterviewsProviderMockRecorder) DeleteInterviewByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInterviewByID", reflect.TypeOf((*MockinterviewsProvider)(nil).DeleteInterviewByID), id)
}

// GetInterviewByID mocks base method.
func (m *MockinterviewsProvider) GetInterviewByID(id int) (*repomodels.InterviewRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewByID", id)
	ret0, _ := ret[0].(*repomodels.InterviewRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewByID indicates an expected call of GetInterviewByID.
func (mr *MockinterviewsProviderMockRecorder) GetInterviewByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewByID", reflect.TypeOf((*MockinterviewsProvider)(nil).GetInterviewByID), id)
}

// InsertInterview mocks base method.
func (m *MockinterviewsProvider) InsertInterview(interview repomodels.InterviewRepo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertInterview", interview)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertInterview indicates an expected call of InsertInterview.
func (mr *MockinterviewsProviderMockRecorder) InsertInterview(interview interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertInterview", reflect.TypeOf((*MockinterviewsProvider)(nil).InsertInterview), interview)
}

// UpdateInterview mocks base method.
func (m *MockinterviewsProvider) UpdateInterview(interview repomodels.InterviewRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInterview", interview)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInterview indicates an expected call of UpdateInterview.
func (mr *MockinterviewsProviderMockRecorder) UpdateInterview(interview interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInterview", reflect.TypeOf((*MockinterviewsProvider)(nil).UpdateInterview), interview)
}

// MockDatabaseMatchProvider is a mock of DatabaseMatchProvider interface.
type MockDatabaseMatchProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMatchProviderMockRecorder
}

// MockDatabaseMatchProviderMockRecorder is the mock recorder for MockDatabaseMatchProvider.
type MockDatabaseMatchProviderMockRecorder struct {
	mock *MockDatabaseMatchProvider
}

// NewMockDatabaseMatchProvider creates a new mock instance.
func NewMockDatabaseMatchProvider(ctrl *gomock.Controller) *MockDatabaseMatchProvider {
	mock := &MockDatabaseMatchProvider{ctrl: ctrl}
	mock.recorder = &MockDatabaseMatchProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseMatchProvider) EXPECT() *MockDatabaseMatchProviderMockRecorder {
	return m.recorder
}

// DeleteInterviewByID mocks base method.
func (m *MockDatabaseMatchProvider) DeleteInterviewByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInterviewByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInterviewByID indicates an expected call of DeleteInterviewByID.
func (mr *MockDatabaseMatchProviderMockRecorder) DeleteInterviewByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInterviewByID", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).DeleteInterviewByID), id)
}

// DeleteMatchRequestByID mocks base method.
func (m *MockDatabaseMatchProvider) DeleteMatchRequestByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMatchRequestByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMatchRequestByID indicates an expected call of DeleteMatchRequestByID.
func (mr *MockDatabaseMatchProviderMockRecorder) DeleteMatchRequestByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMatchRequestByID", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).DeleteMatchRequestByID), id)
}

// DeleteSkillInRequestByID mocks base method.
func (m *MockDatabaseMatchProvider) DeleteSkillInRequestByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSkillInRequestByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSkillInRequestByID indicates an expected call of DeleteSkillInRequestByID.
func (mr *MockDatabaseMatchProviderMockRecorder) DeleteSkillInRequestByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSkillInRequestByID", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).DeleteSkillInRequestByID), id)
}

// DeleteSkillInRequestByRequestID mocks base method.
func (m *MockDatabaseMatchProvider) DeleteSkillInRequestByRequestID(requestID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSkillInRequestByRequestID", requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSkillInRequestByRequestID indicates an expected call of DeleteSkillInRequestByRequestID.
func (mr *MockDatabaseMatchProviderMockRecorder) DeleteSkillInRequestByRequestID(requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSkillInRequestByRequestID", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).DeleteSkillInRequestByRequestID), requestID)
}

// DeleteUserMatchByID mocks base method.
func (m *MockDatabaseMatchProvider) DeleteUserMatchByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserMatchByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserMatchByID indicates an expected call of DeleteUserMatchByID.
func (mr *MockDatabaseMatchProviderMockRecorder) DeleteUserMatchByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserMatchByID", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).DeleteUserMatchByID), id)
}

// GetInterviewByID mocks base method.
func (m *MockDatabaseMatchProvider) GetInterviewByID(id int) (*repomodels.InterviewRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewByID", id)
	ret0, _ := ret[0].(*repomodels.InterviewRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewByID indicates an expected call of GetInterviewByID.
func (mr *MockDatabaseMatchProviderMockRecorder) GetInterviewByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewByID", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).GetInterviewByID), id)
}

// GetMatchRequestByID mocks base method.
func (m *MockDatabaseMatchProvider) GetMatchRequestByID(id int) (*repomodels.MatchRequestRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchRequestByID", id)
	ret0, _ := ret[0].(*repomodels.MatchRequestRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchRequestByID indicates an expected call of GetMatchRequestByID.
func (mr *MockDatabaseMatchProviderMockRecorder) GetMatchRequestByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchRequestByID", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).GetMatchRequestByID), id)
}

// GetMatchRequestByUserID mocks base method.
func (m *MockDatabaseMatchProvider) GetMatchRequestByUserID(userID int) (*repomodels.MatchRequestRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchRequestByUserID", userID)
	ret0, _ := ret[0].(*repomodels.MatchRequestRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchRequestByUserID indicates an expected call of GetMatchRequestByUserID.
func (mr *MockDatabaseMatchProviderMockRecorder) GetMatchRequestByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchRequestByUserID", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).GetMatchRequestByUserID), userID)
}

// GetSkillInRequestByID mocks base method.
func (m *MockDatabaseMatchProvider) GetSkillInRequestByID(id int) (*repomodels.SkillInRequestRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillInRequestByID", id)
	ret0, _ := ret[0].(*repomodels.SkillInRequestRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillInRequestByID indicates an expected call of GetSkillInRequestByID.
func (mr *MockDatabaseMatchProviderMockRecorder) GetSkillInRequestByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillInRequestByID", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).GetSkillInRequestByID), id)
}

// GetSkillInRequestByRequestID mocks base method.
func (m *MockDatabaseMatchProvider) GetSkillInRequestByRequestID(requestID int) (*repomodels.SkillInRequestRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillInRequestByRequestID", requestID)
	ret0, _ := ret[0].(*repomodels.SkillInRequestRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillInRequestByRequestID indicates an expected call of GetSkillInRequestByRequestID.
func (mr *MockDatabaseMatchProviderMockRecorder) GetSkillInRequestByRequestID(requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillInRequestByRequestID", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).GetSkillInRequestByRequestID), requestID)
}

// GetUserMatchByID mocks base method.
func (m *MockDatabaseMatchProvider) GetUserMatchByID(id int) (*repomodels.UserMatchRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMatchByID", id)
	ret0, _ := ret[0].(*repomodels.UserMatchRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMatchByID indicates an expected call of GetUserMatchByID.
func (mr *MockDatabaseMatchProviderMockRecorder) GetUserMatchByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMatchByID", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).GetUserMatchByID), id)
}

// GetUserMatchByUserAskerID mocks base method.
func (m *MockDatabaseMatchProvider) GetUserMatchByUserAskerID(userID int) (*repomodels.UserMatchRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMatchByUserAskerID", userID)
	ret0, _ := ret[0].(*repomodels.UserMatchRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMatchByUserAskerID indicates an expected call of GetUserMatchByUserAskerID.
func (mr *MockDatabaseMatchProviderMockRecorder) GetUserMatchByUserAskerID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMatchByUserAskerID", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).GetUserMatchByUserAskerID), userID)
}

// InsertInterview mocks base method.
func (m *MockDatabaseMatchProvider) InsertInterview(interview repomodels.InterviewRepo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertInterview", interview)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertInterview indicates an expected call of InsertInterview.
func (mr *MockDatabaseMatchProviderMockRecorder) InsertInterview(interview interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertInterview", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).InsertInterview), interview)
}

// InsertMatchRequest mocks base method.
func (m *MockDatabaseMatchProvider) InsertMatchRequest(req repomodels.MatchRequestRepo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMatchRequest", req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMatchRequest indicates an expected call of InsertMatchRequest.
func (mr *MockDatabaseMatchProviderMockRecorder) InsertMatchRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMatchRequest", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).InsertMatchRequest), req)
}

// InsertSkillInRequest mocks base method.
func (m *MockDatabaseMatchProvider) InsertSkillInRequest(skill repomodels.SkillInRequestRepo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSkillInRequest", skill)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertSkillInRequest indicates an expected call of InsertSkillInRequest.
func (mr *MockDatabaseMatchProviderMockRecorder) InsertSkillInRequest(skill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSkillInRequest", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).InsertSkillInRequest), skill)
}

// InsertUserMatch mocks base method.
func (m *MockDatabaseMatchProvider) InsertUserMatch(match repomodels.UserMatchRepo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserMatch", match)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUserMatch indicates an expected call of InsertUserMatch.
func (mr *MockDatabaseMatchProviderMockRecorder) InsertUserMatch(match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserMatch", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).InsertUserMatch), match)
}

// UpdateInterview mocks base method.
func (m *MockDatabaseMatchProvider) UpdateInterview(interview repomodels.InterviewRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInterview", interview)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInterview indicates an expected call of UpdateInterview.
func (mr *MockDatabaseMatchProviderMockRecorder) UpdateInterview(interview interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInterview", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).UpdateInterview), interview)
}

// UpdateMatchRequest mocks base method.
func (m *MockDatabaseMatchProvider) UpdateMatchRequest(req repomodels.MatchRequestRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMatchRequest", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatchRequest indicates an expected call of UpdateMatchRequest.
func (mr *MockDatabaseMatchProviderMockRecorder) UpdateMatchRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchRequest", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).UpdateMatchRequest), req)
}

// UpdateUserMatch mocks base method.
func (m *MockDatabaseMatchProvider) UpdateUserMatch(match repomodels.UserMatchRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserMatch", match)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserMatch indicates an expected call of UpdateUserMatch.
func (mr *MockDatabaseMatchProviderMockRecorder) UpdateUserMatch(match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserMatch", reflect.TypeOf((*MockDatabaseMatchProvider)(nil).UpdateUserMatch), match)
}
